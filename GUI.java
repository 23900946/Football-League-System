/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

//Imports classes from the other packages
import JFL.JFL;
import JFL.Team;
import JFL.Player;
import JFL.Manager;
import JFL.Referee;
import JFL.Match;
import Data.save;
import Data.Load;
import Data.NewSeason;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Serializable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author 23900946
 */
public class GUI extends javax.swing.JFrame implements Serializable {

    /**
     * Creates new form NewJFrame
     */
    JFL JFLData; 

    DefaultListModel<String> PlayerList = new DefaultListModel<>();
    DefaultListModel<String> TeamList = new DefaultListModel<>();
    DefaultListModel<String> RefList = new DefaultListModel<>();
    DefaultListModel<String> ManList = new DefaultListModel<>();
    DefaultListModel<String> L1 = new DefaultListModel<>();
    DefaultListModel<String> L2 = new DefaultListModel<>();
    DefaultListModel<String> L3 = new DefaultListModel<>();
    DefaultListModel<String> L4 = new DefaultListModel<>();
    DefaultListModel<String> L5 = new DefaultListModel<>();
    DefaultListModel<String> matchResult = new DefaultListModel<>();
    DefaultListModel<String> matchStats = new DefaultListModel<>();

    int points = 0;
    int wins = 0;
    int draws = 0;
    int losses = 0;
    String displayPoints = Integer.toString(points); //Converts points to a string
    String displayWins = Integer.toString(wins); //Converts wins to a string
    String displayDraws = Integer.toString(draws); //Converts draws to a string 
    String displayLosses = Integer.toString(losses); //Converts losses to a string

    public GUI() {
        initComponents();

        JFLData = new JFL();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane14 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane15 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        List1 = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        List2 = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        List3 = new javax.swing.JList<>();
        jScrollPane6 = new javax.swing.JScrollPane();
        List4 = new javax.swing.JList<>();
        jLabel10 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        firstNameBox = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        PositionBox = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        ageBox = new javax.swing.JTextField();
        DeletePlayer = new javax.swing.JButton();
        CreatePlayer = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        CreateTeam = new javax.swing.JButton();
        DeleteTeam = new javax.swing.JButton();
        lastNameBox = new javax.swing.JTextField();
        teamNameBox = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        refFirstNameBox = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        employedBox = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        CreateRef = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        refLastNameBox = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        refAgeBox = new javax.swing.JTextField();
        Update = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        manFirstNameBox = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        manLastNameBox = new javax.swing.JTextField();
        CreateManager = new javax.swing.JButton();
        DeleteManager = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        formationBox = new javax.swing.JComboBox<>();
        DeleteRef = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane13 = new javax.swing.JScrollPane();
        TeamOptions = new javax.swing.JList<>();
        Save = new javax.swing.JButton();
        Load = new javax.swing.JButton();
        jScrollPane16 = new javax.swing.JScrollPane();
        Coaches = new javax.swing.JList<>();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        NewSeason = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        MatchResults = new javax.swing.JList<>();
        HomeGoals = new javax.swing.JTextField();
        AwayGoals = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        RecordMatch = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        RedCards = new javax.swing.JTextField();
        YellowCards = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        ExtraTime = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        HomeOptions = new javax.swing.JList<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        AwayOptions = new javax.swing.JList<>();
        jLabel40 = new javax.swing.JLabel();
        jScrollPane17 = new javax.swing.JScrollPane();
        MatchRef = new javax.swing.JList<>();
        jScrollPane18 = new javax.swing.JScrollPane();
        MatchStats = new javax.swing.JList<>();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        AssistsBox = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        WeekBox = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        Updates2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        Teams = new javax.swing.JList<>();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        PointsList = new javax.swing.JList<>();
        jScrollPane10 = new javax.swing.JScrollPane();
        WinList = new javax.swing.JList<>();
        jLabel35 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        DrawList = new javax.swing.JList<>();
        jLabel36 = new javax.swing.JLabel();
        jScrollPane12 = new javax.swing.JScrollPane();
        LossList = new javax.swing.JList<>();
        jLabel37 = new javax.swing.JLabel();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane14.setViewportView(jList1);

        jScrollPane15.setViewportView(jList2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane2.setViewportView(List1);

        jScrollPane4.setViewportView(List2);

        jScrollPane5.setViewportView(List3);

        jScrollPane6.setViewportView(List4);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Players");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Create/Delete team");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("Teams");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Create/Delete player");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel14.setText("Referees");

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel24.setText("Managers");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel20.setText("Updates:");

        jLabel5.setText("Last name");

        jLabel6.setText("Position");

        jLabel7.setText("Team name");

        PositionBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "GK", "DF", "MF", "FW" }));
        PositionBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PositionBoxActionPerformed(evt);
            }
        });

        jLabel8.setText("Age");

        DeletePlayer.setText("Delete");
        DeletePlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletePlayerActionPerformed(evt);
            }
        });

        CreatePlayer.setText("Create");
        CreatePlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreatePlayerActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Junior Football League management system");
        jLabel9.setName(""); // NOI18N
        jLabel9.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        CreateTeam.setText("Create");
        CreateTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateTeamActionPerformed(evt);
            }
        });

        DeleteTeam.setText("Delete");
        DeleteTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteTeamActionPerformed(evt);
            }
        });

        lastNameBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastNameBoxActionPerformed(evt);
            }
        });

        teamNameBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamNameBoxActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setText("Create/Delete Referee");

        jLabel16.setText("First name");

        employedBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Full time", "Part time" }));

        jLabel17.setText("Employed");

        CreateRef.setText("Create");
        CreateRef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateRefActionPerformed(evt);
            }
        });

        jLabel18.setText("Last name");

        jLabel19.setText("Age");

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel21.setText("Create/Delete manager");

        jLabel22.setText("First name");

        jLabel23.setText("Last name");

        CreateManager.setText("Create");
        CreateManager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateManagerActionPerformed(evt);
            }
        });

        DeleteManager.setText("Delete");
        DeleteManager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteManagerActionPerformed(evt);
            }
        });

        jLabel12.setText("Formation");

        formationBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "4-3-3", "4-4-2", "4-2-3-1", "3-5-2", "3-4-3" }));

        DeleteRef.setText("Delete");
        DeleteRef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteRefActionPerformed(evt);
            }
        });

        jLabel11.setText("First Name");

        jScrollPane13.setViewportView(TeamOptions);

        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        Load.setText("Load");
        Load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadActionPerformed(evt);
            }
        });

        jScrollPane16.setViewportView(Coaches);

        jLabel38.setText("Plays for:");

        jLabel39.setText("Coaches");

        NewSeason.setText("New season");
        NewSeason.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewSeasonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(28, 28, 28))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel23)
                            .addComponent(jLabel22)
                            .addComponent(jLabel12)
                            .addComponent(jLabel6)
                            .addComponent(jLabel39)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel38)
                                .addGap(10, 10, 10)))
                        .addGap(18, 18, 18)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(manLastNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(formationBox, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(326, 326, 326)
                                            .addComponent(jLabel7)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(jLabel21)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel17)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(refFirstNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(teamNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(30, 30, 30)
                                        .addComponent(CreateTeam)
                                        .addGap(18, 18, 18)
                                        .addComponent(DeleteTeam))
                                    .addComponent(refLastNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(employedBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel20)
                                    .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(Save)
                                        .addGap(18, 18, 18)
                                        .addComponent(Load)
                                        .addGap(18, 18, 18)
                                        .addComponent(NewSeason))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(CreateRef)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(DeleteRef))
                                        .addComponent(refAgeBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lastNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(CreateManager)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(DeleteManager))
                                        .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(ageBox, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(PositionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(CreatePlayer)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(DeletePlayer))
                                        .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(manFirstNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(35, 35, 35)
                                        .addComponent(jLabel3))
                                    .addComponent(firstNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(312, 312, 312)
                                        .addComponent(jLabel15))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(319, 319, 319)
                                        .addComponent(jLabel2)))))
                        .addContainerGap(267, Short.MAX_VALUE))))
            .addComponent(jSeparator1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addGap(107, 107, 107)
                                .addComponent(jLabel24))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(345, 345, 345)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(firstNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lastNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(teamNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CreateTeam)
                            .addComponent(DeleteTeam))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ageBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PositionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel38))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DeletePlayer)
                            .addComponent(CreatePlayer))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(manFirstNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(manLastNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel23))))
                        .addGap(17, 17, 17))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(refFirstNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(refLastNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(refAgeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(employedBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CreateRef)
                            .addComponent(DeleteRef))
                        .addGap(33, 33, 33)
                        .addComponent(jLabel20)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(formationBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel39))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(CreateManager)
                            .addComponent(DeleteManager)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Save)
                            .addComponent(Load)
                            .addComponent(NewSeason))))
                .addGap(14, 14, 14)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(346, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("JFL", jPanel1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Record match result ");

        jLabel4.setText("Home team");

        jLabel25.setText("Away team");

        jLabel26.setText("Home goals");

        jLabel27.setText("Away goals");

        jScrollPane1.setViewportView(MatchResults);

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel28.setText("Matches:");

        RecordMatch.setText("Record");
        RecordMatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecordMatchActionPerformed(evt);
            }
        });

        jLabel29.setText("Yellow cards");

        jLabel30.setText("Red cards");

        jLabel31.setText("Extra time");

        jScrollPane3.setViewportView(HomeOptions);

        jScrollPane7.setViewportView(AwayOptions);

        jLabel40.setText("Referee");

        jScrollPane17.setViewportView(MatchRef);

        jScrollPane18.setViewportView(MatchStats);

        jLabel41.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel41.setText("Match stats:");

        jLabel42.setText("Assists");

        jLabel43.setText("Week");

        jLabel44.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel44.setText("Updates:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel26, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel27, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(AwayGoals, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                                    .addComponent(HomeGoals, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel31, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel40, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel29, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel42, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel44)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel43)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel30))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(WeekBox, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RedCards, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(YellowCards, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ExtraTime, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AssistsBox, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(283, 283, 283))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(517, 517, 517)
                        .addComponent(RecordMatch, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(472, 472, 472)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(181, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(Updates2, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(231, 231, 231))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel28)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel41))
                        .addGap(231, 231, 231))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel43)
                            .addComponent(WeekBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel25)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(HomeGoals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(YellowCards, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(RedCards, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel30)))
                            .addComponent(jLabel29))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ExtraTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel31))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel42)
                            .addComponent(AssistsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel40))
                        .addGap(0, 38, Short.MAX_VALUE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AwayGoals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel27)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel44)))
                .addGap(9, 9, 9)
                .addComponent(Updates2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(RecordMatch)
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel41, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel28))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane18)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE))
                .addGap(347, 347, 347))
        );

        jTabbedPane1.addTab("Record Match", jPanel2);

        jLabel32.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel32.setText("League table");

        jScrollPane8.setViewportView(Teams);

        jLabel33.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel33.setText("Team:");

        jLabel34.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel34.setText("Points:");

        jScrollPane9.setViewportView(PointsList);

        jScrollPane10.setViewportView(WinList);

        jLabel35.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel35.setText("Wins");

        jScrollPane11.setViewportView(DrawList);

        jLabel36.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel36.setText("Draws:");

        jScrollPane12.setViewportView(LossList);

        jLabel37.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel37.setText("Losses:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel33))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel35)
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel36))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel37))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel34)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(213, 213, 213)
                        .addComponent(jLabel32)))
                .addContainerGap(774, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel32)
                .addGap(29, 29, 29)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel35)
                        .addComponent(jLabel36))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel34)
                        .addComponent(jLabel37))
                    .addComponent(jLabel33))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                    .addComponent(jScrollPane8)
                    .addComponent(jScrollPane9))
                .addContainerGap(479, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("League table", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RecordMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecordMatchActionPerformed

        int week = Integer.parseInt(WeekBox.getText()); //Gets the text from the text field
        String homeTeam = HomeOptions.getSelectedValue(); //Gets the selected team from the home team list
        String awayTeam = AwayOptions.getSelectedValue(); //Gets the selected team from the away team list
        String ref = MatchRef.getSelectedValue(); //Gets the selected referee from the referee options list
        int homeGoals = Integer.parseInt(HomeGoals.getText()); //Gets the home goals from the text field and converts it to an integer
        int awayGoals = Integer.parseInt(AwayGoals.getText()); //Gets the away goals from the text field and converts it to an integer
        int YC = Integer.parseInt(YellowCards.getText()); //Gets the yellow cards from the text field and converts it to an integer
        int RC = Integer.parseInt(RedCards.getText()); //Gets the red cards from the text field and converts it to an integer
        int extraTime = Integer.parseInt(ExtraTime.getText()); //Gets the extra time from the text field and converts it to an integer
        int assists = Integer.parseInt(AssistsBox.getText()); //Gets the assists from the text field and converts it to an integer

        if (week > 18) { //There are only 18 weeks in season therefore a week number cannot go past 18

            Updates2.setText("There are only 18 weeks in a season");

        } else {

            if (homeGoals > awayGoals) { //If the home team win then the following will happen...

                Match newMatch = new Match(homeTeam, awayTeam, homeGoals, awayGoals, YC, RC, extraTime, assists); //Create match object

                JFLData.addMatch(newMatch); //Add the match to the match array

                matchResult.addElement("Week: " + week + " " + homeTeam + ": " + homeGoals + "  " + awayTeam + ": " + awayGoals + " Winner: " + homeTeam + " " + "Referee: " + ref);

                matchStats.addElement("Assists: " + assists + " Yellow cards: " + YC + " Red cards: " + RC + " ET: " + extraTime);

                MatchResults.setModel(matchResult); //Update Match results

                MatchStats.setModel(matchStats); //Update Match stats

                Team winingTeam = JFLData.getTeamByName(homeTeam); //Find the home team

                int retreiveWins = winingTeam.getWins(); //Retreive the home teams current wins

                int updateWins = retreiveWins + 1; //Increase the home teams wins by 1

                int retreivePoints = winingTeam.getPoints(); //Retreive the away teams current points

                int updateScore = retreivePoints + 3; //Increase the home teams points by 3
                
                //Below here the team and its stats are removed from the league table and readded with their updated stats, this is a way of the lsits updating themselves

                TeamList.removeElement(homeTeam);

                L1.removeElement(displayWins);

                L2.removeElement(displayDraws);

                L3.removeElement(displayLosses);

                L4.removeElement(displayPoints);

                TeamList.addElement(homeTeam);

                displayWins = Integer.toString(updateWins);

                L1.addElement(displayWins);

                L2.addElement(displayDraws);

                L3.addElement(displayLosses);

                displayPoints = Integer.toString(updateScore);

                L4.addElement(displayPoints);

                PointsList.setModel(L4);

                Teams.setModel(TeamList);

                WinList.setModel(L1);

                DrawList.setModel(L2);

                LossList.setModel(L3);

                Updates2.setText("Match created"); //Informs the admin a match has been recorded

            }

            if (homeGoals < awayGoals) { //If the away team win then the following will happen...

                Match newMatch = new Match(homeTeam, awayTeam, homeGoals, awayGoals, YC, RC, extraTime, assists);  //Create match object

                JFLData.addMatch(newMatch); //Add the match to the match array

                matchResult.addElement("Week: " + week + " " + homeTeam + ": " + homeGoals + "  " + awayTeam + ": " + awayGoals + " Winner: " + homeTeam + " " + "Referee: " + ref);

                matchStats.addElement("Assists: " + assists + " Yellow cards: " + YC + " Red cards: " + RC + " ET: " + extraTime);

                MatchResults.setModel(matchResult); //Update Match results

                MatchStats.setModel(matchStats);  //Update Match stats
 
                Team winingTeam = JFLData.getTeamByName(awayTeam); //Find the away team

                int retreiveWins = winingTeam.getWins(); //Retreive the away teams current wins

                int updateWins = retreiveWins + 1; //Increase the away teams wins by 1

                int retreivePoints = winingTeam.getPoints(); //Retreive the away teams current points

                int updateScore = retreivePoints + 3; //Increase the home teams points by 3
                
                //Below here the team and its stats are removed from the league table and readded with their updated stats, this is a way of the lsits updating themselves

                TeamList.removeElement(awayTeam);

                L1.removeElement(displayWins);

                L2.removeElement(displayDraws);

                L3.removeElement(displayLosses);

                L4.removeElement(displayPoints);

                TeamList.addElement(awayTeam);

                displayWins = Integer.toString(updateWins);

                L1.addElement(displayWins);

                L2.addElement(displayDraws);

                L3.addElement(displayLosses);

                displayPoints = Integer.toString(updateScore);

                L4.addElement(displayPoints);

                PointsList.setModel(L4);

                Teams.setModel(TeamList);

                WinList.setModel(L1);

                DrawList.setModel(L2);

                LossList.setModel(L3);

                Updates2.setText("Match created"); //Informs the admin a match has been recorded

            }

            if (homeGoals == awayGoals || awayGoals == homeGoals) { //If there is a draw then the following will happen...

                Match newMatch = new Match(homeTeam, awayTeam, homeGoals, awayGoals, YC, RC, extraTime, assists);  //Create match object

                JFLData.addMatch(newMatch); //Add the match to the match array

                matchResult.addElement("Week: " + week + " " + homeTeam + ": " + homeGoals + "  " + awayTeam + ": " + awayGoals + " Draw");

                matchStats.addElement("Assists: " + assists + " Yellow cards: " + YC + " Red cards: " + RC + " ET: " + extraTime);

                MatchResults.setModel(matchResult); //Update Match results

                MatchStats.setModel(matchStats); //Update Match stats

                Team draw = JFLData.getTeamByName(homeTeam); //Find the home team

                Team draw2 = JFLData.getTeamByName(awayTeam); //Find the away team

                int retreivePoints = draw.getPoints(); //Retreive the home teams current points

                int retreivePoints2 = draw2.getPoints(); //Retreive the away teams current points

                int updateScore = retreivePoints + 1; //Increase the home and away teams points by 3
                
                //Below here the team and its stats are removed from the league table and readded with their updated stats, this is a way of the lsits updating themselves

                TeamList.removeElement(homeTeam);

                L1.removeElement(displayWins);

                L2.removeElement(displayDraws);

                L3.removeElement(displayLosses);

                L4.removeElement(displayPoints);

                TeamList.addElement(homeTeam);

                L1.addElement(displayWins);

                L2.addElement(displayDraws);

                L3.addElement(displayLosses);

                displayPoints = Integer.toString(updateScore);

                L4.addElement(displayPoints);

                PointsList.setModel(L4);

                Teams.setModel(TeamList);

                WinList.setModel(L1);

                DrawList.setModel(L2);

                LossList.setModel(L3);

                Updates2.setText("Match created"); //Informs the admin a match has been recorded

            }
        }

    }//GEN-LAST:event_RecordMatchActionPerformed

    private void LoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadActionPerformed

        //All lists are clear so that the same text does not appear twice 
        PlayerList.clear();
        TeamList.clear();
        RefList.clear();
        ManList.clear();
        matchResult.clear();
        matchStats.clear();
        L1.clear();
        L2.clear();
        L3.clear();
        L4.clear();
        L5.clear();

        Load loadData = new Load();

        try {

            JFLData = loadData.loadData();

            Update.setText("Data loaded");

        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        BufferedReader loadPlayers = null;
        BufferedReader loadTeams = null;
        BufferedReader loadRefs = null;
        BufferedReader loadManagers = null;
        BufferedReader loadWins = null;
        BufferedReader loadDraws = null;
        BufferedReader loadLosses = null;
        BufferedReader loadPoints = null;
        BufferedReader loadMatches = null;
        BufferedReader loadMStats = null;

        try {
            loadPlayers = new BufferedReader(new FileReader("Players.dat"));
            int get = Integer.parseInt(loadPlayers.readLine());

            for (int i = 0; i < get; i++) {

                String readLine = loadPlayers.readLine();
                PlayerList.addElement(readLine);

            }

            List1.setModel(PlayerList);

            loadPlayers.close();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            loadTeams = new BufferedReader(new FileReader("Teams.dat"));
            int get = Integer.parseInt(loadTeams.readLine());

            for (int i = 0; i < get; i++) {

                String readLine = loadTeams.readLine();
                TeamList.addElement(readLine);

            }

            List2.setModel(TeamList);
            TeamOptions.setModel(TeamList);
            Coaches.setModel(TeamList);
            HomeOptions.setModel(TeamList);
            AwayOptions.setModel(TeamList);
            Teams.setModel(TeamList);

            loadTeams.close();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            loadRefs = new BufferedReader(new FileReader("Referees.dat"));
            int get = Integer.parseInt(loadRefs.readLine());

            for (int i = 0; i < get; i++) {

                String readLine = loadRefs.readLine();
                RefList.addElement(readLine);

            }

            List3.setModel(RefList);
            MatchRef.setModel(RefList);

            loadRefs.close();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            loadManagers = new BufferedReader(new FileReader("Managers.dat"));
            int get = Integer.parseInt(loadPlayers.readLine());

            for (int i = 0; i < get; i++) {

                String readLine = loadManagers.readLine();
                ManList.addElement(readLine);

            }

            List4.setModel(ManList);

            loadManagers.close();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            loadWins = new BufferedReader(new FileReader("Wins.dat"));
            int get = Integer.parseInt(loadWins.readLine());

            for (int i = 0; i < get; i++) {

                String readLine = loadWins.readLine();
                L1.addElement(readLine);

            }

            WinList.setModel(L1);

            loadWins.close();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            loadDraws = new BufferedReader(new FileReader("Draws.dat"));
            int get = Integer.parseInt(loadDraws.readLine());

            for (int i = 0; i < get; i++) {

                String readLine = loadDraws.readLine();
                L2.addElement(readLine);

            }

            DrawList.setModel(L2);

            loadDraws.close();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            loadLosses = new BufferedReader(new FileReader("Losses.dat"));
            int get = Integer.parseInt(loadLosses.readLine());

            for (int i = 0; i < get; i++) {

                String readLine = loadLosses.readLine();
                L3.addElement(readLine);

            }

            LossList.setModel(L3);

            loadLosses.close();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            loadPoints = new BufferedReader(new FileReader("Points.dat"));
            int get = Integer.parseInt(loadPoints.readLine());

            for (int i = 0; i < get; i++) {

                String readLine = loadPoints.readLine();
                L4.addElement(readLine);

            }

            PointsList.setModel(L4);

            loadPoints.close();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            loadMatches = new BufferedReader(new FileReader("Matches.dat"));
            int get = Integer.parseInt(loadMatches.readLine());

            for (int i = 0; i < get; i++) {

                String readLine = loadMatches.readLine();
                matchResult.addElement(readLine);

            }

            MatchResults.setModel(matchResult);

            loadMatches.close();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            loadMStats = new BufferedReader(new FileReader("MatchStats.dat"));
            int get = Integer.parseInt(loadMStats.readLine());

            for (int i = 0; i < get; i++) {

                String readLine = loadMStats.readLine();
                matchStats.addElement(readLine);

            }

            MatchStats.setModel(matchStats);

            loadMStats.close();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_LoadActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed

        save store = new save(); //Creates an instance of the Save class

        try {

            store.saveData(JFLData); //Saves all the data in the JFL by calling the saveData method from the JFL class

            Update.setText("Data saved"); //Informs the administrator that a the data has been saved 

        } catch (IOException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        //I managed to put the code below together with help of a youtbe video which is listed in the references
        
        //Each of these integer variables gets the model and size of all the Jlists in the GUI
        
        int savePlayers = List1.getModel().getSize();
        int saveTeams = List2.getModel().getSize();
        int saveManagers = List4.getModel().getSize();
        int saveRefs = List3.getModel().getSize();
        int saveWins = WinList.getModel().getSize();
        int saveDraws = DrawList.getModel().getSize();
        int saveLosses = LossList.getModel().getSize();
        int savePoints = PointsList.getModel().getSize();
        int saveMatches = MatchResults.getModel().getSize();
        int saveMatchStats = MatchStats.getModel().getSize();

        PrintWriter Players = null;
        PrintWriter Teams = null;
        PrintWriter Managers = null;
        PrintWriter Refs = null;
        PrintWriter Wins = null;
        PrintWriter Draws = null;
        PrintWriter Losses = null;
        PrintWriter Points = null;
        PrintWriter Matches = null;
        PrintWriter MStats = null;
        
        try {
            Players = new PrintWriter("Players.dat"); //Create data file for the Jlist
            Players.println(savePlayers);

            for (int i = 0; i < savePlayers; i++) { //Goes through the Jlist

                Players.println(List1.getModel().getElementAt(i)); //Prints the Jlist into the data file

            }

            Players.close(); //Stop going through the Jlist

        } catch (FileNotFoundException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            Teams = new PrintWriter("Teams.dat"); //Create data file for the Jlist
            Teams.println(saveTeams);

            for (int i = 0; i < saveTeams; i++) { //Goes through the Jlist

                Teams.println(List2.getModel().getElementAt(i)); //Prints the Jlist into the data file

            }

            Teams.close(); //Stop going through the Jlist

        } catch (FileNotFoundException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            Refs = new PrintWriter("Referees.dat"); //Create data file for the Jlist
            Refs.println(saveRefs);

            for (int i = 0; i < saveRefs; i++) { //Goes through the Jlist

                Refs.println(List3.getModel().getElementAt(i)); //Prints the Jlist into the data file

            }

            Refs.close(); //Stop going through the Jlist

        } catch (FileNotFoundException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            Managers = new PrintWriter("Managers.dat"); //Create data file for the Jlist
            Managers.println(saveManagers);

            for (int i = 0; i < saveManagers; i++) { //Goes through the Jlist

                Managers.println(List4.getModel().getElementAt(i)); //Prints the Jlist into the data file

            }

            Managers.close(); //Stop going through the Jlist

        } catch (FileNotFoundException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            Wins = new PrintWriter("Wins.dat"); //Create data file for the Jlist
            Wins.println(saveWins);

            for (int i = 0; i < saveWins; i++) { //Goes through the Jlist

                Wins.println(WinList.getModel().getElementAt(i)); //Prints the Jlist into the data file

            }

            Wins.close(); //Stop going through the Jlist

        } catch (FileNotFoundException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            Draws = new PrintWriter("Draws.dat"); //Create data file for the Jlist
            Draws.println(saveDraws);

            for (int i = 0; i < saveDraws; i++) { //Goes through the Jlist

                Draws.println(DrawList.getModel().getElementAt(i)); //Prints the Jlist into the data file

            }

            Draws.close(); //Stop going through the Jlist

        } catch (FileNotFoundException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            Losses = new PrintWriter("Losses.dat"); //Create data file for the Jlist
            Losses.println(saveLosses);

            for (int i = 0; i < saveLosses; i++) { //Goes through the Jlist

                Losses.println(LossList.getModel().getElementAt(i)); //Prints the Jlist into the data file

            }

            Losses.close(); //Stop going through the Jlist

        } catch (FileNotFoundException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            Points = new PrintWriter("Points.dat"); //Create data file for the Jlist
            Points.println(savePoints);

            for (int i = 0; i < savePoints; i++) { //Goes through the Jlist

                Points.println(PointsList.getModel().getElementAt(i)); //Prints the Jlist into the data file

            }

            Points.close(); //Stop going through the Jlist

        } catch (FileNotFoundException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            Matches = new PrintWriter("Matches.dat"); //Create data file for the Jlist
            Matches.println(saveMatches);

            for (int i = 0; i < saveMatches; i++) { //Goes through the Jlist

                Matches.println(MatchResults.getModel().getElementAt(i)); //Prints the Jlist into the data file

            }

            Matches.close(); //Stop going through the Jlist

        } catch (FileNotFoundException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            MStats = new PrintWriter("MatchStats.dat"); //Create data file for the Jlist
            MStats.println(saveMatchStats);

            for (int i = 0; i < saveMatchStats; i++) { //Goes through the Jlist

                MStats.println(MatchStats.getModel().getElementAt(i)); //Prints the Jlist into the data file

            }

            MStats.close(); //Stop going through the Jlist

        } catch (FileNotFoundException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_SaveActionPerformed

    private void DeleteManagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteManagerActionPerformed

        String firstName = manFirstNameBox.getText(); //Gets the text from the text field
        String lastName = manLastNameBox.getText(); //Gets the text from the text field
        String formation = (String) formationBox.getSelectedItem(); //Gets the selected formation from the drop down box
        String team = (String) Coaches.getSelectedValue(); //Gets the selected team from the Team options list

        boolean input = JFLData.deleteManager(firstName, lastName); //Calls the deleteManager method from the JFL class

        if (input) { //If the manager is found and deleted then the adiminstrator is informed that they have been deleted

            Update.setText(firstName + " " + lastName + " has been removed from the JFL.");

        } else { //If the manager has already been deleted or doesnt exist then the adiminstrator is informed that the manager can't be found

            Update.setText(firstName + " " + lastName + " does not exist.");
        }

        ManList.removeElement(firstName + " " + lastName + " " + formation + " " + team); //Remove the manager from the manager list
    }//GEN-LAST:event_DeleteManagerActionPerformed

    private void CreateManagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateManagerActionPerformed

        String firstName = manFirstNameBox.getText(); //Gets the text from the text field
        String lastName = manLastNameBox.getText(); //Gets the text from the text field
        String formation = (String) formationBox.getSelectedItem(); //Gets the selected formation from the drop down box
        String team = (String) Coaches.getSelectedValue(); //Gets the selected team from the Team options list

        Team getTeam = JFLData.getTeamByName(team); //Calls the getTeamByName method from the JFL class

        Manager newMan = new Manager(firstName, lastName, formation); //Creates a new manager object

        JFLData.addManager(newMan); //Calls the addManager function from the JFL class to add the new manager to the system

        JFLData.addManagerIntoTeam(getTeam, newMan); //Adds the manager into the team the admin has selected

        Update.setText("Manager: " + firstName + " " + lastName + " created"); //Informs the adiministrator that a manager has been created

        ManList.addElement(firstName + " " + lastName + " " + formation + " " + team); //Displays the manager in the manager list

        List4.setModel(ManList); //Update list 4
    }//GEN-LAST:event_CreateManagerActionPerformed

    private void CreateRefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateRefActionPerformed

        String firstName = refFirstNameBox.getText(); //Gets the text from the text field
        String lastName = refLastNameBox.getText(); //Gets the text from the text field
        int age = Integer.parseInt(refAgeBox.getText()); //Gets the age from the text field and converts it to an integer
        String employed = (String) employedBox.getSelectedItem(); //Gets the selected employment status from the drop down box

        Referee newRef = new Referee(firstName, lastName, age, employed); //Creates a new referee object

        JFLData.addReferee(newRef); //Calls the addReferee function from the JFL class to add the new referee to the system

        Update.setText("Referee: " + firstName + " was created."); //Informs the adiministrator that a referee has been created

        RefList.addElement(firstName + " " + lastName + " " + age + " " + employed); //Displays the referee in the referee list

        L5.addElement(firstName + " " + lastName + " " + age + " " + employed); //Displays the referee in the match referee list

        MatchRef.setModel(L5); //Update MatchRef

        List3.setModel(RefList); //Update List 3
    }//GEN-LAST:event_CreateRefActionPerformed

    private void teamNameBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamNameBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_teamNameBoxActionPerformed

    private void lastNameBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastNameBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lastNameBoxActionPerformed

    private void DeleteTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteTeamActionPerformed
        
        String teamName = teamNameBox.getText(); //Gets the text from the text field

        boolean input = JFLData.deleteTeam(teamName); //Calls the deleteTeam method from the JFL class

        if (input) { //If the team is found and deleted then the adiminstrator is informed that it has been deleted

            Update.setText(teamName + " has been removed from the JFL.");

        } else { //If the team has already been deleted or doesnt exist then the adiminstrator is informed that the team can't be found

            Update.setText(teamName + " does not exist.");
        }

        TeamList.removeElement(teamName); //Remove the team's name from lists

        L1.removeElement(displayWins); //Remove the team's wins from the league table 

        L2.removeElement(displayDraws); //Remove the team's draws from the league table

        L3.removeElement(displayLosses); //Remove the team's wins from the league table

        L4.removeElement(displayPoints); //Remove the team's points from the league table

    }//GEN-LAST:event_DeleteTeamActionPerformed

    private void CreateTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateTeamActionPerformed

        String teamName = teamNameBox.getText(); //Gets the text from the text field

        Team newTeam = new Team(teamName, points, wins, losses, draws); //Creates a new team object

        JFLData.addTeam(newTeam); //Calls the addTeam function from the JFL class to add the new team to the system

        Update.setText("Team: " + teamName + " was created."); //Informs the adiministrator that a team has been created

        TeamList.addElement(teamName); //Adds the team's name to the team list

        L1.addElement(displayWins);  //Display the teams wins in the league table

        L2.addElement(displayDraws); //Display the teams draws in the league table

        L3.addElement(displayLosses); //Display the teams losses in the league table

        L4.addElement(displayPoints); //Display the teams wins in the league table

        List2.setModel(TeamList); //Update list 2

        HomeOptions.setModel(TeamList); //Update Home options

        AwayOptions.setModel(TeamList); //Update Away options 

        Teams.setModel(TeamList); //Update Teams

        WinList.setModel(L1); //Update win list

        DrawList.setModel(L2); //Update draw list

        LossList.setModel(L3); //Update loss list

        PointsList.setModel(L4); //Update points list

        TeamOptions.setModel(TeamList); //Update team options 

        Coaches.setModel(TeamList); //Update the teams a manager can coach
    }//GEN-LAST:event_CreateTeamActionPerformed

    private void CreatePlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreatePlayerActionPerformed
        
        String firstName = firstNameBox.getText(); //Gets the text from the text field
        String lastName = lastNameBox.getText(); //Gets the text from the text field
        int age = Integer.parseInt(ageBox.getText()); //Gets the age from the text field and converts it to an integer
        String position = (String) PositionBox.getSelectedItem(); //Gets the selected position from the drop down box
        String teamName = (String) TeamOptions.getSelectedValue(); //Gets the selected team from the Team options list

        Team getTeam = JFLData.getTeamByName(teamName); //Calls the getTeamByName method from the JFL class

        Player newPlayer = new Player(firstName, lastName, age, position); //Creates a new player object

        JFLData.addPlayer(newPlayer); //Calls the addPlayer function from the JFL class to add the new player to the system

        JFLData.addPlayerIntoTeam(getTeam, newPlayer); //Adds the player into the team the admin has selected

        Update.setText("Player " + firstName + " was created."); //Informs the adiministrator that a player has been created

        PlayerList.addElement(firstName + " " + lastName + " " + age + " " + position + " " + teamName); //Displays the player in the player list

        List1.setModel(PlayerList); //Update list 1
    }//GEN-LAST:event_CreatePlayerActionPerformed

    private void DeletePlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletePlayerActionPerformed

        String firstName = firstNameBox.getText(); //Gets the text from the text field
        String lastName = lastNameBox.getText(); //Gets the text from the text field
        int age = Integer.parseInt(ageBox.getText()); //Gets the age from the text field and converts it to an integer
        String position = (String) PositionBox.getSelectedItem(); //Gets the selected position from the drop down box
        String teamName = (String) TeamOptions.getSelectedValue(); //Gets the selected team from the Team options list

        Team getTeam = JFLData.getTeamByName(teamName); //Calls the getTeamByName method from the JFL class

        boolean input = JFLData.deletePlayer(firstName, lastName); //Calls the deletePlayer method from the JFL class

        if (input) { //If the player is found and deleted then the adiminstrator is informed that it has been deleted
            Update.setText(firstName + " " + lastName + " has been removed from the JFL.");

        } else { //If the player has already been deleted or doesnt exist then the adiminstrator is informed that the player can't be found
            Update.setText(firstName + " " + lastName + " does not exist.");
        }

        PlayerList.removeElement(firstName + " " + lastName + " " + age + " " + position + " " + teamName); //Remove the player from the player list

    }//GEN-LAST:event_DeletePlayerActionPerformed

    private void PositionBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PositionBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PositionBoxActionPerformed

    private void NewSeasonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewSeasonActionPerformed

         //All lists are clear so that the same text does not appear twice 
        
        PlayerList.clear();
        TeamList.clear();
        RefList.clear();
        ManList.clear();
        matchResult.clear();
        matchStats.clear();

        NewSeason loadData = new NewSeason(); //Creates an instance of the New season class

        try {

            JFLData = loadData.startNewSeason(); //Loads all the data in the JFL by calling the startNewSeason method from the JFL class

            Update.setText("Data loaded"); //Informs the administrator that a the data has been loaded

        } catch (IOException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        BufferedReader loadPlayers = null;
        BufferedReader loadTeams = null;
        BufferedReader loadRefs = null;
        BufferedReader loadManagers = null;
        BufferedReader loadWins = null;
        BufferedReader loadDraws = null;
        BufferedReader loadLosses = null;
        BufferedReader loadPoints = null;

        try {
            loadPlayers = new BufferedReader(new FileReader("Players.dat")); //Selects the file that will be read
            int get = Integer.parseInt(loadPlayers.readLine());

            for (int i = 0; i < get; i++) {  

                String readLine = loadPlayers.readLine(); //reads the file
                PlayerList.addElement(readLine); //Adds all the text from the file into the list

            }

            List1.setModel(PlayerList); //Update list 1

            loadPlayers.close(); //Stop reading the file

        } catch (FileNotFoundException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            loadTeams = new BufferedReader(new FileReader("Teams.dat")); //Selects the file that will be read
            int get = Integer.parseInt(loadTeams.readLine());

            for (int i = 0; i < get; i++) {

                String readLine = loadTeams.readLine(); //reads the file
                TeamList.addElement(readLine); //Adds all the text from the file into the list

            }
 
            //Updates all the lists with team names in the them
            
            List2.setModel(TeamList);
            TeamOptions.setModel(TeamList);
            Coaches.setModel(TeamList);
            HomeOptions.setModel(TeamList);
            AwayOptions.setModel(TeamList);
            Teams.setModel(TeamList);

            loadTeams.close(); //Stop reading the file

        } catch (FileNotFoundException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            loadRefs = new BufferedReader(new FileReader("Referees.dat")); //Selects the file that will be read
            int get = Integer.parseInt(loadRefs.readLine());

            for (int i = 0; i < get; i++) {

                String readLine = loadRefs.readLine(); //reads the file
                RefList.addElement(readLine); //Adds all the text from the file into the list

            }

            //Updates all the lists that contain referees
            
            List3.setModel(RefList);
            MatchRef.setModel(RefList);

            loadRefs.close(); //Stop reading the file

        } catch (FileNotFoundException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            loadManagers = new BufferedReader(new FileReader("Managers.dat")); //Selects the file that will be read
            int get = Integer.parseInt(loadPlayers.readLine());

            for (int i = 0; i < get; i++) {

                String readLine = loadManagers.readLine(); //reads the file
                ManList.addElement(readLine); //Adds all the text from the file into the list

            }

            List4.setModel(ManList); //Update list 4

            loadRefs.close(); //Stop reading the file
 
        } catch (FileNotFoundException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            loadWins = new BufferedReader(new FileReader("Wins.dat")); //Selects the file that will be read
            int get = Integer.parseInt(loadWins.readLine());

            for (int i = 0; i < get; i++) {

                String readLine = loadWins.readLine(); //reads the file
                L1.addElement(readLine); //Adds all the text from the file into the list

            }

            WinList.setModel(L1); //Update win list

            loadWins.close(); //Stop reading the file

        } catch (FileNotFoundException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            loadDraws = new BufferedReader(new FileReader("Draws.dat")); //Selects the file that will be read
            int get = Integer.parseInt(loadDraws.readLine());

            for (int i = 0; i < get; i++) {

                String readLine = loadDraws.readLine(); //reads the file
                L2.addElement(readLine);

            }

            DrawList.setModel(L2); //Update draw list

            loadDraws.close(); //Stop reading the file

        } catch (FileNotFoundException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            loadLosses = new BufferedReader(new FileReader("Losses.dat")); //Selects the file that will be read
            int get = Integer.parseInt(loadLosses.readLine());

            for (int i = 0; i < get; i++) {

                String readLine = loadLosses.readLine(); //reads the file
                L3.addElement(readLine); //Adds all the text from the file into the list

            }

            LossList.setModel(L3); //Update loss list

            loadLosses.close(); //Stop reading the file

        } catch (FileNotFoundException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            loadPoints = new BufferedReader(new FileReader("Points.dat")); //Selects the file that will be read
            int get = Integer.parseInt(loadPoints.readLine());

            for (int i = 0; i < get; i++) {

                String readLine = loadPoints.readLine(); //reads the file
                L4.addElement(readLine); //Adds all the text from the file into the list

            }

            PointsList.setModel(L4); //Update points list

            loadPoints.close(); //Stop reading the file

        } catch (FileNotFoundException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) { //Catch exception
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_NewSeasonActionPerformed

    private void DeleteRefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteRefActionPerformed

        String firstName = refFirstNameBox.getText(); //Gets the text from the text field
        String lastName = refLastNameBox.getText(); //Gets the text from the text field
        int age = Integer.parseInt(refAgeBox.getText()); //Gets the age from the text field and converts it to an integer
        String employed = (String) employedBox.getSelectedItem(); //Gets the selected employment status from the drop down box

        boolean input = JFLData.deleteRef(firstName, lastName); //Calls the deleteRef method from the JFL class

        if (input) { //If the referee is found and deleted then the adiminstrator is informed that it has been deleted
            Update.setText(firstName + " " + lastName + " has been removed from the JFL.");

        } else { //If the referee has already been deleted or doesnt exist then the adiminstrator is informed that the referee can't be found
            Update.setText(firstName + " " + lastName + " does not exist.");
        }

        RefList.removeElement(firstName + " " + lastName + " " + age + " " + employed); //Remove the referee from the referee list


    }//GEN-LAST:event_DeleteRefActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {

                new GUI().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AssistsBox;
    private javax.swing.JTextField AwayGoals;
    private javax.swing.JList<String> AwayOptions;
    private javax.swing.JList<String> Coaches;
    private javax.swing.JButton CreateManager;
    private javax.swing.JButton CreatePlayer;
    private javax.swing.JButton CreateRef;
    private javax.swing.JButton CreateTeam;
    private javax.swing.JButton DeleteManager;
    private javax.swing.JButton DeletePlayer;
    private javax.swing.JButton DeleteRef;
    private javax.swing.JButton DeleteTeam;
    private javax.swing.JList<String> DrawList;
    private javax.swing.JTextField ExtraTime;
    private javax.swing.JTextField HomeGoals;
    private javax.swing.JList<String> HomeOptions;
    private javax.swing.JList<String> List1;
    private javax.swing.JList<String> List2;
    private javax.swing.JList<String> List3;
    private javax.swing.JList<String> List4;
    private javax.swing.JButton Load;
    private javax.swing.JList<String> LossList;
    private javax.swing.JList<String> MatchRef;
    private javax.swing.JList<String> MatchResults;
    private javax.swing.JList<String> MatchStats;
    private javax.swing.JButton NewSeason;
    private javax.swing.JList<String> PointsList;
    private javax.swing.JComboBox<String> PositionBox;
    private javax.swing.JButton RecordMatch;
    private javax.swing.JTextField RedCards;
    private javax.swing.JButton Save;
    private javax.swing.JList<String> TeamOptions;
    private javax.swing.JList<String> Teams;
    private javax.swing.JLabel Update;
    private javax.swing.JLabel Updates2;
    private javax.swing.JTextField WeekBox;
    private javax.swing.JList<String> WinList;
    private javax.swing.JTextField YellowCards;
    private javax.swing.JTextField ageBox;
    private javax.swing.JComboBox<String> employedBox;
    private javax.swing.JTextField firstNameBox;
    private javax.swing.JComboBox<String> formationBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField lastNameBox;
    private javax.swing.JTextField manFirstNameBox;
    private javax.swing.JTextField manLastNameBox;
    private javax.swing.JTextField refAgeBox;
    private javax.swing.JTextField refFirstNameBox;
    private javax.swing.JTextField refLastNameBox;
    private javax.swing.JTextField teamNameBox;
    // End of variables declaration//GEN-END:variables
}
